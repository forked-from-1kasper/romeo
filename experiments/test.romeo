constants A B C D : U

variables X Y Z

macro ∘² X := X ∘ X
macro ∘³ X := X ∘ X ∘ X
macro ∘⁶ X := ∘² (∘³ X)

#macroexpand ∘³ (F ∘ G ∘ H ∘ F′ ∘ G′ ∘ H′)

#infer Hom U₂ U₁ U₁

#eval U₃

constants F : Hom U A B
constants G : Hom U B C
constants H : Hom U C D

#eval (H ∘ G) ∘ id B ∘ (F ∘ id A)

constants x y z : A

constants φ : Hom A x x
#eval ∘⁶ (φ ∘ φ)

definition ∘⁴ (f : Hom A x x) := f ∘ f ∘ f ∘ f
#eval ∘⁴ φ

constants f : Hom A x y
constants g : Hom A y z

#eval (G ∘ F) (g ∘ f)

constants ρ : Hom U (Hom A x z) A
#eval ρ (g ∘ f)

constants ρ′ : Hom U (Hom A x x) A

#eval ρ′ (id x)
#eval ρ′ (id (id x))

lemma lem1 : ∀ (f : Hom A x x), f = f :=
λ f, refl f

axiom ax1 : ∃ (g : Hom A x x), g = g ∘ g

NB that’s a comment

import experiments/test2.romeo experiments/test2.romeo

lemma lem2 : ∀ (f : Hom A x x), f ∘ f = f ⊃ f ∘ f = f ∘ f ∘ f :=
λ f H, have H′ : f = f ∘ f => symm H in subst g (f ∘ f = f ∘ g) H′ (refl (f ∘ f))

lemma lem3 : ∀ (f : Hom A x x), ¬ ¬ (f ∘ f = f) ⊃ (f ∘ f = f) :=
λ f H, ¬¬-elim H

lemma lem4 : ∀ (f : Hom A x x), (f ∘ f = f) ∨ ¬ (f ∘ f = f) :=
λ f, lem (f ∘ f = f) (λ H, ∨-left H) (λ G, ∨-right G)

constant catProd (A B : U) : U

infixr 90 ×
definition (A : U) × (B : U) := catProd[A, B]

#eval C × D × C × D
