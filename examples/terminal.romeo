constants C : U

predicate ∃-Hom  (X : C) (Y : C) := ∃  (g : Hom C X Y), ⊤
predicate ∃!-Hom (X : C) (Y : C) := ∃! (g : Hom C X Y), ⊤

predicate isTerminal (T : C) :=
∀ (X : C), ∃!-Hom X T

infixr 80 ≅

predicate isQinv (X : C) (Y : C) (f : Hom C X Y) (g : Hom C Y X) :=
(f ∘ g = id Y) ∧ (g ∘ f = id X)

predicate hasQinv (X : C) (Y : C) (f : Hom C X Y) :=
∃ (g : Hom C Y X), isQinv X Y f g

predicate (X : C) ≅ (Y : C) :=
∃ (f : Hom C X Y), hasQinv X Y f

lemma leftId : ∀ (a b : C) (f : Hom C a b), id b ∘ f = f :=
λ _ _ f, refl f

lemma rightId : ∀ (a b : C) (f : Hom C a b), f ∘ id a = f :=
λ _ _ f, refl f

lemma compositionIsAssoc : ∀ (a b c d : C) (f : Hom C a b) (g : Hom C b c) (h : Hom C c d), (h ∘ g) ∘ f = h ∘ (g ∘ f) :=
λ _ _ _ _ f g h, refl (h ∘ g ∘ f)

theorem terminalIsUnique : ∀ (T₁ T₂ : C), isTerminal T₁ ⊃ isTerminal T₂ ⊃ T₁ ≅ T₂ :=
λ T₁ T₂ G H,
  have G′ : ∃-Hom  T₂ T₁ => ∃!→∃ (∀-elim G T₂) in
  have H′ : ∃-Hom  T₁ T₂ => ∃!→∃ (∀-elim H T₁) in
  have G″ : ∃!-Hom T₁ T₁ => ∀-elim G T₁        in
  have H″ : ∃!-Hom T₂ T₂ => ∀-elim H T₂        in

  ∃-elim G′ (λ g₁ _, ∃-elim H′ (λ g₂ _,
    ∃-intro g₂ (∃-intro g₁
      (∧-intro (∃!-uniq H″ trivial trivial)
               (∃!-uniq G″ trivial trivial)))))

lemma ≅-refl : ∀ (X : C), X ≅ X :=
λ X, ∃-intro (id X) (∃-intro (id X) (∧-intro (refl (id X)) (refl (id X))))

lemma ≅-symm : ∀ (X Y : C), X ≅ Y ⊃ Y ≅ X :=
λ X Y H, ∃-elim H (λ f H′, ∃-elim H′ (λ g H″, ∃-intro g (∃-intro f (∧-intro (∧-pr₂ H″) (∧-pr₁ H″)))))

lemma ≅-trans : ∀ (X Y Z : C), X ≅ Y ⊃ Y ≅ Z ⊃ X ≅ Z :=
λ X Y Z H G, ∃-elim H (λ f₁ H′, ∃-elim G (λ f₂ G′,
  ∃-elim H′ (λ g₁ H″, ∃-elim G′ (λ g₂ G″,
    ∃-intro (f₂ ∘ f₁) (∃-intro (g₁ ∘ g₂)
      (have F₁ : id Y = f₁ ∘ g₁ => symm (∧-pr₁ H″) in
       have F₂ : id Y = g₂ ∘ f₂ => symm (∧-pr₂ G″) in
        ∧-intro (subst h (f₂ ∘ h ∘ g₂ = id Z) F₁ (∧-pr₁ G″))
                (subst h (g₁ ∘ h ∘ f₁ = id X) F₂ (∧-pr₂ H″))))))))